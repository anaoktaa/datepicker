{"version":3,"sources":["components/input/input.styles.js","components/input/input.component.js","components/regular-datepicker/regular-datepicker.styles.js","components/header-month/header-month.styles.js","components/header-month/header-month.component.js","components/weekdays-name/weekdays-name.styles.js","components/weekdays-name/weekdays-name.component.js","components/date-of-month/date-of-month.styles.js","components/date-of-month/date-of-month.component.js","components/date-of-month/date-of-month.utils.js","components/regular-datepicker/regular-datepicker.component.js","components/full-screen-datepicker/full-screen-datepicker.styles.js","components/full-screen-datepicker/full-screen-datepicker.component.js","components/datepicker/datepicker.component.js","App.js","serviceWorker.js","index.js"],"names":["InputContainer","styled","div","DateText","p","Input","handleClick","value","onClick","class","style","color","fontSize","DatepickerContainer","MonthContainer","HeaderMonthContainer","ButtonDirection","MonthTextBold","HeaderMonth","monthYear","leftArrow","rightArrow","handlePreviousMonth","handleNextMonth","appearLeft","appearRight","handleEntered","CSSTransition","in","timeout","classNames","onEntered","DaysNameContainer","ul","DaysTextStyle","css","DaysName","li","RedDaysName","WeekdaysName","daysLocale","weekdays","Array","keys","map","i","localize","day","width","index","key","Style1","Style2","Style3","selectedColor","Style4","isHoliday","props","dateStyle","DateOfMonth","locale","initialDate","handlePickDate","selectedDate","monthDateList","today","subDays","Date","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","startDate","startOfWeek","weekDateList","formattedDate","format","objOfDate","date","isBefore","isSameDay","isSameMonth","isAfter","push","addDays","MonthDateArray","week","isSunday","getDate","RegularDatepicker","onPickDate","handleNext","handlePrevious","useState","setAppearLeft","setAppearRight","console","log","addMonths","FullScreenDatepickerContainer","Header","HeaderTitleText","DateContainer","FullScreenDatepicker","handleCancel","title","cursor","Datepicker","localeDate","type","ref","useRef","showPanel","setShowPanel","defaultDate","setDefaultDate","datePick","setDatePick","setTimeout","handleNextSlideMonth","handlePreviousSlideMonth","subMonths","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","className","defaultProps","id","App","setSelectedDate","selectedDateRegular","setSelectedDateRegular","enUS","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f6a2846.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const InputContainer = styled.div`\r\n    border: 1px solid #cccccc;\r\n    border-radius: 4px;\r\n    padding: 11px 12px;\r\n    width: 220px;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n`;\r\n\r\nexport const DateText = styled.p`\r\n    color: #5a5a5a;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    padding: 0;\r\n`;","import React from 'react';\r\n\r\nimport { InputContainer, DateText } from './input.styles';\r\n\r\nconst Input = ({ handleClick, value }) => {\r\n    return (\r\n        <InputContainer onClick={handleClick}>\r\n            <DateText>\r\n                {value}\r\n            </DateText>\r\n            <i class=\"far fa-calendar-alt\" style={{color: '#5a5a5a', fontSize: '17px'}}></i>\r\n        </InputContainer>\r\n    )\r\n};\r\n\r\nexport default Input;","import styled from 'styled-components';\r\n\r\nexport const DatepickerContainer = styled.div`\r\n    position: absolute;\r\n    min-width: 800px;\r\n    overflow: hidden;\r\n    top: 50px;\r\n    left: 0;\r\n    padding: 20px 10px;\r\n    border-radius: 4px;\r\n    box-shadow: 0 2px 6px hsl(0deg 0% 0% / 17%), 0 0 0 1px rgba(0,0,0,.07);\r\n    display: flex;\r\n    align-items: flex-start;\r\n    justify-content: space-between;\r\n    box-sizing: border-box;\r\n    width: 820px;\r\n    background-color: white;\r\n`;\r\n\r\nexport const MonthContainer = styled.div`\r\n    width: 400px;\r\n    padding: 10px 20px;\r\n    box-sizing: border-box;\r\n`;","import styled from 'styled-components';\r\n\r\nexport const HeaderMonthContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content:  space-between;\r\n`;\r\n\r\nexport const ButtonDirection = styled.div`\r\n    box-shadow: 1px 1px 3px #bdbdbd, -1px 2px 3px #dedede;\r\n    width: 30px;\r\n    height: 30px;\r\n    border-radius: 50%;\r\n    text-align: center;\r\n    line-height: 30px;\r\n    cursor: pointer;\r\n`;\r\n\r\nexport const MonthTextBold = styled.p`\r\n    color: #5a5a5a;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    padding: 0;\r\n    font-weight: bold;\r\n`;\r\n\r\nexport const LeftContainer = styled.div`\r\n    display: block;\r\n`;\r\n\r\nexport const RightContainer = styled.div`\r\n    display: block;\r\n`;","import React from 'react';\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nimport { HeaderMonthContainer, ButtonDirection, MonthTextBold } from './header-month.styles';\r\n\r\nconst HeaderMonth = ({ monthYear, leftArrow, rightArrow, handlePreviousMonth,\r\n                       handleNextMonth, appearLeft, appearRight,  handleEntered }) => {\r\n    return (\r\n        <HeaderMonthContainer>\r\n            {\r\n                leftArrow?\r\n                    <ButtonDirection onClick={handlePreviousMonth}>\r\n                        <i class=\"fas fa-chevron-left\" style={{fontSize: '13px', color: '#9c9c9c'}}></i>\r\n                    </ButtonDirection>\r\n                    :\r\n                    <div/>\r\n            }\r\n            <CSSTransition\r\n                in={appearLeft || appearRight}\r\n                timeout={100}\r\n                classNames={appearLeft? 'list-transition-left': 'list-transition-right'}\r\n                onEntered={handleEntered}\r\n            >\r\n                <MonthTextBold>\r\n                    {monthYear}\r\n                </MonthTextBold>\r\n            </CSSTransition>\r\n            {\r\n                rightArrow?\r\n                    <ButtonDirection onClick={handleNextMonth}>\r\n                        <i class=\"fas fa-chevron-right\" style={{fontSize: '13px', color: '#9c9c9c'}}></i>\r\n                    </ButtonDirection>\r\n                    :\r\n                    <div/>\r\n            }\r\n         \r\n        </HeaderMonthContainer>\r\n    );\r\n};\r\n\r\nexport default HeaderMonth;","import styled, { css } from 'styled-components';\r\n\r\nexport const DaysNameContainer = styled.ul`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    margin: 20px 0 0;\r\n    padding: 0;\r\n`;\r\n\r\nconst DaysTextStyle = css`\r\n    display: inline-block;\r\n    font-size: 12px;\r\n    width: 30px;\r\n    letter-spacing: 0.8px;\r\n    height: 30px;\r\n    text-align: center;\r\n`;\r\n\r\nexport const DaysName = styled.li`\r\n    ${DaysTextStyle};\r\n    color: #5d5d5d;\r\n`;\r\n\r\nexport const RedDaysName = styled.li`\r\n    ${DaysTextStyle};\r\n    color: #f51e1e;\r\n`;","import React from 'react';\r\n\r\nimport { DaysName, DaysNameContainer, RedDaysName } from './weekdays-name.styles';\r\n\r\nconst WeekdaysName = ({ daysLocale }) => {\r\n    const weekdays = [...Array(7).keys()].map(i => daysLocale.localize.day(i, { width: 'abbreviated' }));\r\n    return (\r\n        <DaysNameContainer>\r\n            {\r\n                weekdays.map((day, index) => {\r\n                    if (index=== 0) {\r\n                        return (\r\n                            <RedDaysName key={day}>{day}</RedDaysName>\r\n                        )\r\n                    }\r\n                    else {\r\n                        return (\r\n                            <DaysName key={day}>{day}</DaysName>\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        </DaysNameContainer>\r\n    )\r\n};\r\n\r\nexport default WeekdaysName;","import styled, { css } from 'styled-components';\r\n\r\nexport const DaysNameContainer = styled.ul`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    margin: 5px 0 0;\r\n    padding: 0;\r\n`;\r\n\r\nconst DaysTextStyle = css`\r\n    display: inline-block;\r\n    font-size: 12px;\r\n    width: 50px;\r\n    height: 45px;\r\n    text-align: center;\r\n    line-height: 45px;\r\n    margin: 0 5px;\r\n\r\n`;\r\n\r\nconst Style1 = css`\r\n    opacity: 0;\r\n    ${DaysTextStyle};\r\n    color: transparent;\r\n    pointer-events: none;\r\n`;\r\n\r\nconst Style2 = css`\r\n    ${DaysTextStyle};\r\n    color: #e6e6e6;\r\n`;\r\n\r\nconst Style3 = css`\r\n    ${DaysTextStyle};\r\n    color: white;\r\n    background-color:  ${(({selectedColor}) => selectedColor)};\r\n    box-sizing: border-box;\r\n    border-radius: 5px;\r\n    font-weight: bold;\r\n    box-shadow: ${(({selectedColor}) => selectedColor)} 5px 3px 16px -3px;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst Style4 = css`\r\n    ${DaysTextStyle};\r\n    color: ${(({isHoliday}) => isHoliday? `#f51e1e` : `#5d5d5d`)};\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        background-color: #e4e4e4;\r\n        box-sizing: border-box;\r\n        border-radius: 5px;\r\n        font-weight: bold;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst StyleForDaysContainer = props => {\r\n    if (props.dateStyle === 'style__1') {\r\n        return Style1;\r\n    }\r\n    else if (props.dateStyle === 'style__2') {\r\n        return Style2;\r\n    }\r\n    else if (props.dateStyle === 'style__3') {\r\n        return Style3;\r\n    }\r\n    else if (props.dateStyle === 'style__4') {\r\n        return Style4;\r\n    }\r\n}\r\n\r\nexport const DaysName = styled.li`\r\n    ${StyleForDaysContainer};\r\n\r\n`;\r\n\r\n// export const RedDaysName = styled.li`\r\n//     ${DaysTextStyle};\r\n//     color: #f51e1e;\r\n// `;\r\n    ","import React from 'react';\r\nimport { getDate, isSunday, isBefore, subDays } from 'date-fns';\r\n\r\nimport { DaysNameContainer, DaysName } from './date-of-month.styles';\r\nimport { MonthDateArray } from './date-of-month.utils';\r\nconst DateOfMonth = ({ locale, initialDate, handlePickDate, selectedDate, selectedColor }) => {\r\n    const monthDateList = MonthDateArray(initialDate, locale, selectedDate);\r\n\r\n    const onPickDate = (date) => {\r\n        if (isBefore(new Date(date), subDays(new Date(), 1))) return; \r\n        handlePickDate(date)\r\n    }\r\n    return (\r\n        <div>\r\n           {\r\n               monthDateList.map((week, index) => {\r\n                    return (\r\n                        <DaysNameContainer key={index}>\r\n                            {\r\n                                week.map((day) => {\r\n                                    return (\r\n                                        <DaysName selectedColor={selectedColor} onClick={() => onPickDate(day.date)}  key={day.date} isHoliday={isSunday(new Date(day.date))} dateStyle={day.style}>{getDate(new Date(day.date))}</DaysName>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </DaysNameContainer>\r\n                    )\r\n               })\r\n           }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default DateOfMonth;","import { addDays, format, startOfMonth, isBefore, isAfter, subDays,\r\n         endOfMonth, startOfWeek, endOfWeek, isSameDay, isSameMonth } from 'date-fns';\r\n\r\nexport const MonthDateArray = (initialDate, locale, selectedDate) => {\r\n    const today = subDays(new Date(), 1);\r\n    const monthStart = startOfMonth(initialDate);\r\n    const monthEnd = endOfMonth(initialDate);\r\n    const endDate = endOfWeek(monthEnd);\r\n  \r\n    let startDate = startOfWeek(monthStart);\r\n\r\n    const monthDateList = [];\r\n    while (startDate <= endDate) {\r\n        const weekDateList = [];\r\n        for (let i = 0; i < 7; i++) {\r\n            const formattedDate = format(startDate, 'MM-dd-yyyy', { locale : locale });\r\n            const objOfDate = {\r\n                date: formattedDate\r\n            }\r\n            //Adding some condition to define style\r\n\r\n            /*is Before current Month */\r\n            if (isBefore(new Date(formattedDate), new Date(monthStart))) {\r\n                objOfDate.style = 'style__1';\r\n            }   \r\n            /*is before current date */\r\n            else if (isBefore(new Date(formattedDate), new Date(today))) {\r\n                objOfDate.style = 'style__2';\r\n            }  \r\n\r\n            /*is Same with current date */        \r\n            if (isSameDay(new Date(formattedDate), new Date(selectedDate)) && isSameMonth(new Date(formattedDate), new Date(monthEnd))) {\r\n                objOfDate.style = 'style__3';\r\n            }\r\n       \r\n             /*is after current month */\r\n            if (isAfter(new Date(formattedDate), new Date(monthEnd))) {\r\n                objOfDate.style = 'style__1';\r\n            }\r\n            /*is after current date */\r\n            else if (isAfter(new Date(formattedDate), new Date(today)) && isSameMonth(new Date(formattedDate), new Date(monthEnd)) && \r\n                !isSameDay(new Date(formattedDate), new Date(selectedDate)) && isSameMonth(new Date(formattedDate), new Date(monthEnd))) {\r\n                objOfDate.style = 'style__4';\r\n            }\r\n\r\n            weekDateList.push(objOfDate);\r\n            startDate = addDays(startDate, 1);\r\n        }\r\n        monthDateList.push(weekDateList);\r\n    }\r\n    return monthDateList;\r\n}","import React, { useState } from 'react';\r\nimport { addMonths, format } from 'date-fns';\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nimport { DatepickerContainer, MonthContainer } from './regular-datepicker.styles';\r\nimport HeaderMonth from '../header-month/header-month.component';\r\nimport WeekdaysName from '../weekdays-name/weekdays-name.component';\r\nimport DateOfMonth from '../date-of-month/date-of-month.component';\r\n\r\nimport './regular-datepicker.styles.css';\r\n\r\nconst RegularDatepicker = ({ initialDate, locale, daysLocale, onPickDate, \r\n                selectedDate, handleNext, handlePrevious, selectedColor }) => {\r\n\r\n    const [ appearLeft, setAppearLeft ] = useState(false);\r\n    const [ appearRight, setAppearRight ] = useState(false);\r\n\r\n    const handlePreviousMonth = () => {\r\n        handlePrevious();\r\n        setAppearLeft(true);\r\n    }\r\n\r\n    const handleNextMonth = () => {\r\n        handleNext();\r\n        setAppearRight(true);\r\n    }\r\n\r\n    const handleEntered = () => {\r\n        setAppearLeft(false);\r\n        setAppearRight(false);\r\n    }\r\n\r\n    const handlePickDate = (date) => {\r\n        onPickDate(date);\r\n    }\r\n\r\n    console.log(\"SELECTED COLOR\", selectedColor);\r\n\r\n    return (\r\n        <DatepickerContainer>\r\n            <MonthContainer>\r\n                <HeaderMonth\r\n                    monthYear={format(initialDate, 'MMMM yyyy', {locale: locale})}\r\n                    leftArrow={true}\r\n                    handlePreviousMonth={handlePreviousMonth}\r\n                    appearLeft={appearLeft}\r\n                    appearRight={appearRight}\r\n                    handleEntered={handleEntered}\r\n                />           \r\n                <WeekdaysName\r\n                        daysLocale={daysLocale}\r\n                />\r\n\r\n                <CSSTransition\r\n                    in={appearLeft || appearRight}\r\n                    timeout={100}\r\n                    classNames={appearLeft? 'list-transition-left': 'list-transition-right'}\r\n                    onEntered={handleEntered}\r\n                >\r\n                    <DateOfMonth\r\n                        selectedColor={selectedColor}\r\n                        locale={locale}\r\n                        initialDate={initialDate}\r\n                        handlePickDate={handlePickDate}\r\n                        selectedDate={selectedDate}\r\n                    />\r\n                </CSSTransition>\r\n            </MonthContainer>\r\n            <MonthContainer>\r\n                <HeaderMonth\r\n                    monthYear={format(addMonths(initialDate, 1), 'MMMM yyyy', {locale: locale})}\r\n                    rightArrow={true}\r\n                    handleNextMonth={handleNextMonth}\r\n                    appearLeft={appearLeft}\r\n                    appearRight={appearRight}\r\n                    handleEntered={handleEntered}\r\n                />\r\n                <WeekdaysName\r\n                    daysLocale={daysLocale}\r\n                />\r\n                <CSSTransition\r\n                    in={appearLeft || appearRight}\r\n                    timeout={100}\r\n                    classNames={appearLeft? 'list-transition-left': 'list-transition-right'}\r\n                    onEntered={handleEntered}\r\n                >\r\n                    <DateOfMonth\r\n                        selectedColor={selectedColor}\r\n                        locale={locale}\r\n                        initialDate={addMonths(initialDate, 1)}\r\n                        handlePickDate={handlePickDate}\r\n                        selectedDate={selectedDate}\r\n                    />\r\n                </CSSTransition>\r\n            </MonthContainer>\r\n        </DatepickerContainer>\r\n    )\r\n};\r\n\r\nexport default RegularDatepicker;","import styled from 'styled-components';\r\n\r\nexport const FullScreenDatepickerContainer = styled.div`\r\n    margin: 0;\r\n    background-color: white;\r\n    min-width: 300px;\r\n`;\r\n\r\nexport const Header = styled.div`\r\n    height: 70px;\r\n    background-color: ${(({selectedColor}) => selectedColor)};\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    padding: 0px 20px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n`;\r\n\r\nexport const HeaderTitleText = styled.div`\r\n    font-size: 17px;\r\n    font-weight: 500;\r\n    color: white;\r\n`;\r\n\r\nexport const MonthContainer = styled.div`\r\n    height: 70px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    padding: 0 20px;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nexport const DateContainer = styled.div`\r\n    padding: 20px 0;\r\n    box-sizing: border-box;\r\n`;","import React, { useState } from 'react';\r\nimport { format } from 'date-fns';\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nimport HeaderMonth from '../header-month/header-month.component';\r\nimport WeekdaysName from '../weekdays-name/weekdays-name.component';\r\nimport DateOfMonth from '../date-of-month/date-of-month.component';\r\n\r\nimport { FullScreenDatepickerContainer, Header, HeaderTitleText,\r\n         MonthContainer, DateContainer } from './full-screen-datepicker.styles';\r\nimport './full-screen-datepicker.styles.css';\r\n\r\nconst FullScreenDatepicker = ({ initialDate, locale, handleCancel, title,\r\n    onPickDate, selectedDate, handleNext, handlePrevious, selectedColor }) => {\r\n    const [ appearLeft, setAppearLeft ] = useState(false);\r\n    const [ appearRight, setAppearRight ] = useState(false);\r\n\r\n    const handlePreviousMonth = () => {\r\n        handlePrevious();\r\n        setAppearLeft(true);\r\n    }\r\n\r\n    const handleNextMonth = () => {\r\n        handleNext();\r\n        setAppearRight(true);\r\n    }\r\n\r\n    const handleEntered = () => {\r\n        setAppearLeft(false);\r\n        setAppearRight(false);\r\n    }\r\n\r\n    const handlePickDate = (date) => {\r\n        onPickDate(date);\r\n    }\r\n\r\n    return (\r\n        <FullScreenDatepickerContainer>\r\n            <Header selectedColor={selectedColor}>\r\n                <HeaderTitleText>\r\n                    {title}\r\n                </HeaderTitleText>\r\n                <i onClick={handleCancel} class=\"fas fa-times\" style={{color: 'white', fontSize: '18px', cursor: 'pointer'}}></i>\r\n            </Header>\r\n            <MonthContainer>\r\n                <HeaderMonth\r\n                    monthYear={format(initialDate, 'MMMM yyyy', {locale: locale})}\r\n                    leftArrow={true}\r\n                    rightArrow={true}\r\n                    handlePreviousMonth={handlePreviousMonth}\r\n                    handleNextMonth={handleNextMonth}\r\n                    appearLeft={appearLeft}\r\n                    appearRight={appearRight}\r\n                    handleEntered={handleEntered}\r\n                />  \r\n            </MonthContainer>\r\n            <DateContainer>\r\n                <WeekdaysName\r\n                    daysLocale={locale}\r\n                />\r\n                <CSSTransition\r\n                    in={appearLeft || appearRight}\r\n                    timeout={100}\r\n                    classNames={appearLeft? 'list-transition-left': 'list-transition-right'}\r\n                    onEntered={handleEntered}\r\n                >\r\n                    <DateOfMonth\r\n                        selectedColor={selectedColor}\r\n                        locale={locale}\r\n                        initialDate={initialDate}\r\n                        handlePickDate={handlePickDate}\r\n                        selectedDate={selectedDate}\r\n                    />\r\n                </CSSTransition>\r\n            </DateContainer>\r\n          \r\n           \r\n        </FullScreenDatepickerContainer>\r\n\r\n    )\r\n};\r\n\r\nexport default FullScreenDatepicker;","import React, { useState, useRef, useEffect } from 'react';\r\nimport { format, subMonths, addMonths } from 'date-fns';\r\nimport PropTypes from 'prop-types';\r\nimport { id } from 'date-fns/locale';\r\nimport locale from 'date-fns/esm/locale/id';\r\n\r\nimport Input from '../input/input.component';\r\nimport RegularDatepicker from '../regular-datepicker/regular-datepicker.component';\r\nimport FullScreenDatepicker from '../full-screen-datepicker/full-screen-datepicker.component';\r\n\r\nconst Datepicker = ({ selectedDate, locale, localeDate, onPickDate, type, selectedColor, title }) => {\r\n    const timeout = 500;\r\n    const ref = useRef(null);\r\n    const [ showPanel, setShowPanel ] = useState(false);\r\n    const [ defaultDate, setDefaultDate ] = useState(new Date(selectedDate));\r\n    const [ datePick, setDatePick ] = useState(new Date(selectedDate));  \r\n  \r\n    const handleClick = () => {\r\n        setShowPanel(!showPanel);\r\n        setTimeout(() => {\r\n            setDefaultDate(new Date(datePick));\r\n        }, timeout);\r\n    }\r\n  \r\n    const handleCancel = () => {\r\n      setShowPanel(!showPanel);\r\n    }\r\n  \r\n    const handlePickDate = (date) => {\r\n        // const pickDate = format(new Date(date), 'MM-dd-yy', { locale : locale });\r\n        setDatePick(new Date(date));\r\n        onPickDate(new Date(date));\r\n        setTimeout(() => {\r\n            setDefaultDate(new Date(date));\r\n        }, timeout);\r\n        setShowPanel(!showPanel);\r\n    }\r\n  \r\n    const handleNextSlideMonth = () => {\r\n        setDefaultDate(addMonths(defaultDate, 1));\r\n    }\r\n  \r\n    const handlePreviousSlideMonth = () => {\r\n        setDefaultDate(subMonths(defaultDate, 1));\r\n    }\r\n    const handleClickOutside = event => {\r\n        if (ref.current && !ref.current.contains(event.target)) {\r\n            setShowPanel(false);\r\n            setTimeout(() => {\r\n            setDefaultDate(new Date(datePick));\r\n            }, timeout);\r\n        }\r\n    };\r\n  \r\n    useEffect(() => {\r\n        document.addEventListener(\"click\", handleClickOutside, true);\r\n        return () => {\r\n            document.removeEventListener(\"click\", handleClickOutside, true);\r\n        };\r\n    });\r\n\r\n    if (type === 'regular') {\r\n        return (\r\n \r\n            <div className='datepicker-app-container' ref={ref} >\r\n                <Input\r\n                    handleClick={handleClick}\r\n                    value={format(new Date(selectedDate), 'dd MMMM yyyy', { locale : locale })}\r\n                />\r\n                <div className={`${showPanel? `slide-panel`: ``} show-panel`}>\r\n                    <RegularDatepicker\r\n                        selectedColor={selectedColor}\r\n                        initialDate={defaultDate}\r\n                        selectedDate={datePick}\r\n                        locale={locale}\r\n                        daysLocale={localeDate}\r\n                        onPickDate={handlePickDate}\r\n                        handleNext={handleNextSlideMonth}\r\n                        handlePrevious={handlePreviousSlideMonth}\r\n                    \r\n                    />\r\n                </div>  \r\n            </div>\r\n    \r\n        )\r\n    }\r\n    else if (type === 'full-screen') {\r\n        return (\r\n            <div className='datepicker-app-container' ref={ref} >\r\n                <Input\r\n                    handleClick={handleClick}\r\n                    value={format(new Date(selectedDate), 'dd MMMM yyyy', { locale : locale })}\r\n                />\r\n                <div className={`${showPanel? `show`: ``} full-screen-panel `}>\r\n                    <FullScreenDatepicker\r\n                        title={title}\r\n                        selectedColor={selectedColor}\r\n                        initialDate={defaultDate}\r\n                        selectedDate={datePick}\r\n                        locale={locale}\r\n                        daysLocale={localeDate}\r\n                        onPickDate={handlePickDate}\r\n                        handleNext={handleNextSlideMonth}\r\n                        handlePrevious={handlePreviousSlideMonth}\r\n                        handleCancel={handleCancel}\r\n                    />\r\n                </div>\r\n           </div>\r\n        )\r\n    }\r\n    return <div/>\r\n\r\n};\r\n\r\nexport default Datepicker;\r\n\r\nDatepicker.propTypes = {\r\n    onPickDate: PropTypes.func.isRequired,\r\n    selectedDate: PropTypes.instanceOf(Date).isRequired,\r\n    type: PropTypes.oneOf(['full-screen', 'regular']),\r\n    selectedColor: PropTypes.string,\r\n    title: PropTypes.string\r\n};\r\n\r\nDatepicker.defaultProps = {\r\n    locale: id,\r\n    localeDate: locale,\r\n    selectedColor: '#7cc33b',\r\n    title: 'Datepicker'\r\n};","import React, { useState } from 'react';\nimport { enUS } from 'date-fns/locale';\nimport locale from 'date-fns/esm/locale/en-US';\n\nimport './App.css';\n\nimport Datepicker from './components/datepicker/datepicker.component';\n\nfunction App() {\n  const [ selectedDate, setSelectedDate ] = useState( new Date());  \n  const [ selectedDateRegular, setSelectedDateRegular ] = useState( new Date('09-09-2020'));  \n\n  const handlePickDate = (date) => {\n    console.log(\"DATE\", date);\n    setSelectedDate(date);\n  }\n\n  const handlePickDateRegular = (date) => {\n    console.log(\"DATE\", date);\n    setSelectedDateRegular(date);\n  }\n\n  return (\n    <div className='App'>\n      <Datepicker\n        selectedDate={selectedDate}\n        locale={enUS}\n        localeDate={locale}\n        onPickDate={handlePickDate}\n        type='full-screen'\n        selectedColor='#987df5'\n        title='Calendar'\n      />\n      <br/>\n      <Datepicker\n        selectedDate={selectedDateRegular}\n        onPickDate={handlePickDateRegular}\n        type='regular'\n        selectedColor='#f16969'\n      />    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}