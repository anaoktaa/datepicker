{"version":3,"sources":["components/input/input.styles.js","components/input/input.component.js","components/datepicker/datepicker.styles.js","components/header-month/header-month.styles.js","components/header-month/header-month.component.js","components/weekdays-name/weekdays-name.styles.js","components/weekdays-name/weekdays-name.component.js","components/date-of-month/date-of-month.styles.js","components/date-of-month/date-of-month.component.js","components/date-of-month/date-of-month.utils.js","components/datepicker/datepicker.component.js","components/full-screen-datepicker/full-screen-datepicker.styles.js","components/full-screen-datepicker/full-screen-datepicker.component.js","App.js","serviceWorker.js","index.js"],"names":["InputContainer","styled","div","DateText","p","Input","handleClick","value","onClick","class","style","color","fontSize","DatepickerContainer","MonthContainer","HeaderMonthContainer","ButtonDirection","MonthTextBold","HeaderMonth","monthYear","leftArrow","rightArrow","handlePreviousMonth","handleNextMonth","appearLeft","appearRight","handleEntered","CSSTransition","in","timeout","classNames","onEntered","DaysNameContainer","ul","DaysTextStyle","css","DaysName","li","RedDaysName","WeekdaysName","daysLocale","weekdays","Array","keys","map","i","localize","day","width","index","key","Style1","Style2","Style3","Style4","isHoliday","props","dateStyle","DateOfMonth","locale","initialDate","handlePickDate","monthDateList","selectedDate","today","subDays","Date","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","startDate","startOfWeek","weekDateList","formattedDate","format","objOfDate","date","isBefore","isSameDay","isSameMonth","isAfter","push","addDays","MonthDateArray","week","isSunday","getDate","Datepicker","onPickDate","handleNext","handlePrevious","useState","setAppearLeft","setAppearRight","addMonths","FullScreenDatepickerContainer","Header","HeaderTitleText","DateContainer","FullScreenDatepicker","handleCancel","cursor","App","ref","useRef","showPanel","setShowPanel","setInitialDate","setSelectedDate","pickDate","id","setTimeout","handleNextSlideMonth","handlePreviousSlideMonth","subMonths","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0295209e.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const InputContainer = styled.div`\r\n    border: 1px solid #cccccc;\r\n    border-radius: 4px;\r\n    padding: 11px 12px;\r\n    width: 220px;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n`;\r\n\r\nexport const DateText = styled.p`\r\n    color: #5a5a5a;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    padding: 0;\r\n`;","import React from 'react';\r\n\r\nimport { InputContainer, DateText } from './input.styles';\r\n\r\nconst Input = ({ handleClick, value }) => {\r\n    return (\r\n        <InputContainer onClick={handleClick}>\r\n            <DateText>\r\n                {value}\r\n            </DateText>\r\n            <i class=\"far fa-calendar-alt\" style={{color: '#5a5a5a', fontSize: '17px'}}></i>\r\n        </InputContainer>\r\n    )\r\n};\r\n\r\nexport default Input;","import styled from 'styled-components';\r\n\r\nexport const DatepickerContainer = styled.div`\r\n    position: absolute;\r\n    overflow: hidden;\r\n    top: 50px;\r\n    left: 0;\r\n    padding: 20px 10px;\r\n    border-radius: 4px;\r\n    box-shadow: 0 2px 6px hsl(0deg 0% 0% / 17%), 0 0 0 1px rgba(0,0,0,.07);\r\n    display: flex;\r\n    align-items: flex-start;\r\n    justify-content: space-between;\r\n    box-sizing: border-box;\r\n    width: 820px;\r\n`;\r\n\r\nexport const MonthContainer = styled.div`\r\n    width: 400px;\r\n    padding: 10px 20px;\r\n    box-sizing: border-box;\r\n`;","import styled from 'styled-components';\r\n\r\nexport const HeaderMonthContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content:  space-between;\r\n`;\r\n\r\nexport const ButtonDirection = styled.div`\r\n    box-shadow: 1px 1px 3px #bdbdbd, -1px 2px 3px #dedede;\r\n    width: 30px;\r\n    height: 30px;\r\n    border-radius: 50%;\r\n    text-align: center;\r\n    line-height: 30px;\r\n    cursor: pointer;\r\n`;\r\n\r\nexport const MonthTextBold = styled.p`\r\n    color: #5a5a5a;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    padding: 0;\r\n    font-weight: bold;\r\n`;\r\n\r\nexport const LeftContainer = styled.div`\r\n    display: block;\r\n`;\r\n\r\nexport const RightContainer = styled.div`\r\n    display: block;\r\n`;","import React from 'react';\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nimport { HeaderMonthContainer, ButtonDirection, MonthTextBold } from './header-month.styles';\r\n\r\nconst HeaderMonth = ({ monthYear, leftArrow, rightArrow, handlePreviousMonth,\r\n                       handleNextMonth, appearLeft, appearRight,  handleEntered }) => {\r\n    return (\r\n        <HeaderMonthContainer>\r\n            {\r\n                leftArrow?\r\n                    <ButtonDirection onClick={handlePreviousMonth}>\r\n                        <i class=\"fas fa-chevron-left\" style={{fontSize: '13px', color: '#9c9c9c'}}></i>\r\n                    </ButtonDirection>\r\n                    :\r\n                    <div/>\r\n            }\r\n            <CSSTransition\r\n                in={appearLeft || appearRight}\r\n                timeout={100}\r\n                classNames={appearLeft? 'list-transition-left': 'list-transition-right'}\r\n                onEntered={handleEntered}\r\n            >\r\n                <MonthTextBold>\r\n                    {monthYear}\r\n                </MonthTextBold>\r\n            </CSSTransition>\r\n            {\r\n                rightArrow?\r\n                    <ButtonDirection onClick={handleNextMonth}>\r\n                        <i class=\"fas fa-chevron-right\" style={{fontSize: '13px', color: '#9c9c9c'}}></i>\r\n                    </ButtonDirection>\r\n                    :\r\n                    <div/>\r\n            }\r\n         \r\n        </HeaderMonthContainer>\r\n    );\r\n};\r\n\r\nexport default HeaderMonth;","import styled, { css } from 'styled-components';\r\n\r\nexport const DaysNameContainer = styled.ul`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    margin: 20px 0 0;\r\n    padding: 0;\r\n`;\r\n\r\nconst DaysTextStyle = css`\r\n    display: inline-block;\r\n    font-size: 12px;\r\n    width: 30px;\r\n    letter-spacing: 0.8px;\r\n    height: 30px;\r\n    text-align: center;\r\n`;\r\n\r\nexport const DaysName = styled.li`\r\n    ${DaysTextStyle};\r\n    color: #5d5d5d;\r\n`;\r\n\r\nexport const RedDaysName = styled.li`\r\n    ${DaysTextStyle};\r\n    color: #f51e1e;\r\n`;","import React from 'react';\r\n\r\nimport { DaysName, DaysNameContainer, RedDaysName } from './weekdays-name.styles';\r\n\r\nconst WeekdaysName = ({ daysLocale }) => {\r\n    const weekdays = [...Array(7).keys()].map(i => daysLocale.localize.day(i, { width: 'abbreviated' }));\r\n    return (\r\n        <DaysNameContainer>\r\n            {\r\n                weekdays.map((day, index) => {\r\n                    if (index=== 0) {\r\n                        return (\r\n                            <RedDaysName key={day}>{day}</RedDaysName>\r\n                        )\r\n                    }\r\n                    else {\r\n                        return (\r\n                            <DaysName key={day}>{day}</DaysName>\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        </DaysNameContainer>\r\n    )\r\n};\r\n\r\nexport default WeekdaysName;","import styled, { css } from 'styled-components';\r\n\r\nexport const DaysNameContainer = styled.ul`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    margin: 5px 0 0;\r\n    padding: 0;\r\n`;\r\n\r\nconst DaysTextStyle = css`\r\n    display: inline-block;\r\n    font-size: 12px;\r\n    width: 50px;\r\n    height: 45px;\r\n    text-align: center;\r\n    line-height: 45px;\r\n    margin: 0 5px;\r\n\r\n`;\r\n\r\nconst Style1 = css`\r\n    opacity: 0;\r\n    ${DaysTextStyle};\r\n    color: transparent;\r\n    pointer-events: none;\r\n`;\r\n\r\nconst Style2 = css`\r\n    ${DaysTextStyle};\r\n    color: #e6e6e6;\r\n`;\r\n\r\nconst Style3 = css`\r\n    ${DaysTextStyle};\r\n    color: white;\r\n    background-color: #7cc33b;\r\n    box-sizing: border-box;\r\n    border-radius: 5px;\r\n    font-weight: bold;\r\n    box-shadow: rgb(114 239 0) 5px 3px 16px -3px;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst Style4 = css`\r\n    ${DaysTextStyle};\r\n    color: ${(({isHoliday}) => isHoliday? `#f51e1e` : `#5d5d5d`)};\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        background-color: #e4e4e4;\r\n        box-sizing: border-box;\r\n        border-radius: 5px;\r\n        font-weight: bold;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst StyleForDaysContainer = props => {\r\n    if (props.dateStyle === 'style__1') {\r\n        return Style1;\r\n    }\r\n    else if (props.dateStyle === 'style__2') {\r\n        return Style2;\r\n    }\r\n    else if (props.dateStyle === 'style__3') {\r\n        return Style3;\r\n    }\r\n    else if (props.dateStyle === 'style__4') {\r\n        return Style4;\r\n    }\r\n}\r\n\r\nexport const DaysName = styled.li`\r\n    ${StyleForDaysContainer};\r\n\r\n`;\r\n\r\n// export const RedDaysName = styled.li`\r\n//     ${DaysTextStyle};\r\n//     color: #f51e1e;\r\n// `;\r\n    ","import React from 'react';\r\nimport { getDate, isSunday, isBefore, subDays } from 'date-fns';\r\n\r\nimport { DaysNameContainer, DaysName } from './date-of-month.styles';\r\nimport { MonthDateArray } from './date-of-month.utils';\r\nconst DateOfMonth = ({ locale, initialDate, handlePickDate, selectedDate }) => {\r\n    const monthDateList = MonthDateArray(initialDate, locale, selectedDate);\r\n\r\n    const onPickDate = (date) => {\r\n        if (isBefore(new Date(date), subDays(new Date(), 1))) return; \r\n        handlePickDate(date)\r\n    }\r\n    return (\r\n        <div>\r\n           {\r\n               monthDateList.map((week, index) => {\r\n                    return (\r\n                        <DaysNameContainer key={index}>\r\n                            {\r\n                                week.map((day) => {\r\n                                    return (\r\n                                        <DaysName onClick={() => onPickDate(day.date)}  key={day.date} isHoliday={isSunday(new Date(day.date))} dateStyle={day.style}>{getDate(new Date(day.date))}</DaysName>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </DaysNameContainer>\r\n                    )\r\n               })\r\n           }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default DateOfMonth;","import { addDays, format, startOfMonth, isBefore, isAfter, subDays,\r\n         endOfMonth, startOfWeek, endOfWeek, isSameDay, isSameMonth } from 'date-fns';\r\n\r\nexport const MonthDateArray = (initialDate, locale, selectedDate) => {\r\n    const today = subDays(new Date(), 1);\r\n    const monthStart = startOfMonth(initialDate);\r\n    const monthEnd = endOfMonth(initialDate);\r\n    const endDate = endOfWeek(monthEnd);\r\n  \r\n    let startDate = startOfWeek(monthStart);\r\n\r\n    const monthDateList = [];\r\n    while (startDate <= endDate) {\r\n        const weekDateList = [];\r\n        for (let i = 0; i < 7; i++) {\r\n            const formattedDate = format(startDate, 'MM-dd-yyyy', { locale : locale });\r\n            const objOfDate = {\r\n                date: formattedDate\r\n            }\r\n            //Adding some condition to define style\r\n\r\n            /*is Before current Month */\r\n            if (isBefore(new Date(formattedDate), new Date(monthStart))) {\r\n                objOfDate.style = 'style__1';\r\n            }   \r\n            /*is before current date */\r\n            else if (isBefore(new Date(formattedDate), new Date(today))) {\r\n                objOfDate.style = 'style__2';\r\n            }  \r\n\r\n            /*is Same with current date */        \r\n            if (isSameDay(new Date(formattedDate), new Date(selectedDate)) && isSameMonth(new Date(formattedDate), new Date(monthEnd))) {\r\n                objOfDate.style = 'style__3';\r\n            }\r\n       \r\n             /*is after current month */\r\n            if (isAfter(new Date(formattedDate), new Date(monthEnd))) {\r\n                objOfDate.style = 'style__1';\r\n            }\r\n            /*is after current date */\r\n            else if (isAfter(new Date(formattedDate), new Date(today)) && isSameMonth(new Date(formattedDate), new Date(monthEnd)) && \r\n                !isSameDay(new Date(formattedDate), new Date(selectedDate)) && isSameMonth(new Date(formattedDate), new Date(monthEnd))) {\r\n                objOfDate.style = 'style__4';\r\n            }\r\n\r\n            weekDateList.push(objOfDate);\r\n            startDate = addDays(startDate, 1);\r\n        }\r\n        monthDateList.push(weekDateList);\r\n    }\r\n    return monthDateList;\r\n}","import React, { useState } from 'react';\r\nimport { addMonths, format } from 'date-fns';\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nimport { DatepickerContainer, MonthContainer } from './datepicker.styles';\r\nimport HeaderMonth from '../header-month/header-month.component';\r\nimport WeekdaysName from '../weekdays-name/weekdays-name.component';\r\nimport DateOfMonth from '../date-of-month/date-of-month.component';\r\n\r\nimport './datepicker.styles.css';\r\n\r\nconst Datepicker = ({ initialDate, locale, daysLocale, onPickDate, selectedDate, handleNext, handlePrevious }) => {\r\n\r\n    const [ appearLeft, setAppearLeft ] = useState(false);\r\n    const [ appearRight, setAppearRight ] = useState(false);\r\n\r\n    const handlePreviousMonth = () => {\r\n        handlePrevious();\r\n        setAppearLeft(true);\r\n    }\r\n\r\n    const handleNextMonth = () => {\r\n        handleNext();\r\n        setAppearRight(true);\r\n    }\r\n\r\n    const handleEntered = () => {\r\n        setAppearLeft(false);\r\n        setAppearRight(false);\r\n    }\r\n\r\n    const handlePickDate = (date) => {\r\n        onPickDate(date);\r\n    }\r\n\r\n    return (\r\n        <DatepickerContainer>\r\n            <MonthContainer>\r\n                <HeaderMonth\r\n                    monthYear={format(initialDate, 'MMMM yyyy', {locale: locale})}\r\n                    leftArrow={true}\r\n                    handlePreviousMonth={handlePreviousMonth}\r\n                    appearLeft={appearLeft}\r\n                    appearRight={appearRight}\r\n                    handleEntered={handleEntered}\r\n                />           \r\n                <WeekdaysName\r\n                        daysLocale={daysLocale}\r\n                />\r\n\r\n                <CSSTransition\r\n                    in={appearLeft || appearRight}\r\n                    timeout={100}\r\n                    classNames={appearLeft? 'list-transition-left': 'list-transition-right'}\r\n                    onEntered={handleEntered}\r\n                >\r\n                    <DateOfMonth\r\n                        locale={locale}\r\n                        initialDate={initialDate}\r\n                        handlePickDate={handlePickDate}\r\n                        selectedDate={selectedDate}\r\n                    />\r\n                </CSSTransition>\r\n            </MonthContainer>\r\n            <MonthContainer>\r\n                <HeaderMonth\r\n                    monthYear={format(addMonths(initialDate, 1), 'MMMM yyyy', {locale: locale})}\r\n                    rightArrow={true}\r\n                    handleNextMonth={handleNextMonth}\r\n                    appearLeft={appearLeft}\r\n                    appearRight={appearRight}\r\n                    handleEntered={handleEntered}\r\n                />\r\n                <WeekdaysName\r\n                    daysLocale={daysLocale}\r\n                />\r\n                <CSSTransition\r\n                    in={appearLeft || appearRight}\r\n                    timeout={100}\r\n                    classNames={appearLeft? 'list-transition-left': 'list-transition-right'}\r\n                    onEntered={handleEntered}\r\n                >\r\n                    <DateOfMonth\r\n                        locale={locale}\r\n                        initialDate={addMonths(initialDate, 1)}\r\n                        handlePickDate={handlePickDate}\r\n                        selectedDate={selectedDate}\r\n                    />\r\n                </CSSTransition>\r\n            </MonthContainer>\r\n        </DatepickerContainer>\r\n    )\r\n};\r\n\r\nexport default Datepicker;","import styled from 'styled-components';\r\n\r\nexport const FullScreenDatepickerContainer = styled.div`\r\n    margin: 0;\r\n    background-color: white;\r\n`;\r\n\r\nexport const Header = styled.div`\r\n    height: 70px;\r\n    background-color: #7cc33b;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    padding: 0px 20px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n`;\r\n\r\nexport const HeaderTitleText = styled.div`\r\n    font-size: 17px;\r\n    font-weight: 500;\r\n    color: white;\r\n`;\r\n\r\nexport const MonthContainer = styled.div`\r\n    height: 70px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    padding: 0 20px;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nexport const DateContainer = styled.div`\r\n    padding: 20px 0;\r\n    box-sizing: border-box;\r\n`;","import React, { useState } from 'react';\r\nimport { format } from 'date-fns';\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nimport HeaderMonth from '../header-month/header-month.component';\r\nimport WeekdaysName from '../weekdays-name/weekdays-name.component';\r\nimport DateOfMonth from '../date-of-month/date-of-month.component';\r\n\r\nimport { FullScreenDatepickerContainer, Header, HeaderTitleText,\r\n         MonthContainer, DateContainer } from './full-screen-datepicker.styles';\r\nimport './full-screen-datepicker.styles.css';\r\n\r\nconst FullScreenDatepicker = ({ initialDate, locale, handleCancel, onPickDate, selectedDate, handleNext, handlePrevious }) => {\r\n    const [ appearLeft, setAppearLeft ] = useState(false);\r\n    const [ appearRight, setAppearRight ] = useState(false);\r\n\r\n    const handlePreviousMonth = () => {\r\n        handlePrevious();\r\n        setAppearLeft(true);\r\n    }\r\n\r\n    const handleNextMonth = () => {\r\n        handleNext();\r\n        setAppearRight(true);\r\n    }\r\n\r\n    const handleEntered = () => {\r\n        setAppearLeft(false);\r\n        setAppearRight(false);\r\n    }\r\n\r\n    const handlePickDate = (date) => {\r\n        onPickDate(date);\r\n    }\r\n\r\n    return (\r\n        <FullScreenDatepickerContainer>\r\n            <Header>\r\n                <HeaderTitleText>\r\n                    React Datepicker\r\n                </HeaderTitleText>\r\n                <i onClick={handleCancel} class=\"fas fa-times\" style={{color: 'white', fontSize: '18px', cursor: 'pointer'}}></i>\r\n            </Header>\r\n            <MonthContainer>\r\n                <HeaderMonth\r\n                    monthYear={format(initialDate, 'MMMM yyyy', {locale: locale})}\r\n                    leftArrow={true}\r\n                    rightArrow={true}\r\n                    handlePreviousMonth={handlePreviousMonth}\r\n                    handleNextMonth={handleNextMonth}\r\n                    appearLeft={appearLeft}\r\n                    appearRight={appearRight}\r\n                    handleEntered={handleEntered}\r\n                />  \r\n            </MonthContainer>\r\n            <DateContainer>\r\n                <WeekdaysName\r\n                    daysLocale={locale}\r\n                />\r\n                <CSSTransition\r\n                    in={appearLeft || appearRight}\r\n                    timeout={100}\r\n                    classNames={appearLeft? 'list-transition-left': 'list-transition-right'}\r\n                    onEntered={handleEntered}\r\n                >\r\n                    <DateOfMonth\r\n                        locale={locale}\r\n                        initialDate={initialDate}\r\n                        handlePickDate={handlePickDate}\r\n                        selectedDate={selectedDate}\r\n                    />\r\n                </CSSTransition>\r\n            </DateContainer>\r\n          \r\n           \r\n        </FullScreenDatepickerContainer>\r\n\r\n    )\r\n};\r\n\r\nexport default FullScreenDatepicker;","import React, { useState, useRef, useEffect } from 'react';\nimport { id } from 'date-fns/locale';\nimport locale from 'date-fns/esm/locale/id';\nimport { format, subMonths, addMonths } from 'date-fns';\n\nimport './App.css';\n\nimport Input from './components/input/input.component';\nimport Datepicker from './components/datepicker/datepicker.component';\nimport FullScreenDatepicker from './components/full-screen-datepicker/full-screen-datepicker.component';\n\nfunction App() {\n  const timeout = 500;\n  const ref = useRef(null);\n  const [ showPanel, setShowPanel ] = useState(false);\n  const [ initialDate, setInitialDate ] = useState(new Date());\n  const [ selectedDate, setSelectedDate ] = useState(new Date());  \n\n  const handleClick = () => {\n    setShowPanel(!showPanel);\n    setTimeout(() => {\n      setInitialDate(new Date(selectedDate));\n    }, timeout);\n  }\n\n  const handleCancel = () => {\n    setShowPanel(!showPanel);\n  }\n\n  const handlePickDate = (date) => {\n    const pickDate = format(new Date(date), 'MM-dd-yy', { locale : id });\n    setSelectedDate(pickDate);\n    setTimeout(() => {\n      setInitialDate(new Date(date));\n    }, timeout);\n    setShowPanel(!showPanel);\n  }\n\n  const handleNextSlideMonth = () => {\n    setInitialDate(addMonths(initialDate, 1));\n  }\n\n  const handlePreviousSlideMonth = () => {\n    setInitialDate(subMonths(initialDate, 1));\n  }\n  const handleClickOutside = event => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      setShowPanel(false);\n      setTimeout(() => {\n        setInitialDate(new Date(selectedDate));\n      }, timeout);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"click\", handleClickOutside, true);\n    return () => {\n      document.removeEventListener(\"click\", handleClickOutside, true);\n    };\n  });\n\n  return (\n    <div className='App'>\n     <div className='datepicker-app-container' ref={ref}>\n        <Input\n          handleClick={handleClick}\n          value={format(new Date(selectedDate), 'dd MMMM yyyy', { locale : id })}\n        />\n        <div className={`${showPanel? `show`: ``} full-screen-panel `}>\n          <FullScreenDatepicker\n              initialDate={initialDate}\n              selectedDate={selectedDate}\n              locale={id}\n              daysLocale={locale}\n              onPickDate={handlePickDate}\n              handleNext={handleNextSlideMonth}\n              handlePrevious={handlePreviousSlideMonth}\n              handleCancel={handleCancel}\n          />\n        </div>\n        <div className={`${showPanel? `slide-panel`: ``} show-panel`}>\n          <Datepicker\n            initialDate={initialDate}\n            selectedDate={selectedDate}\n            locale={id}\n            daysLocale={locale}\n            onPickDate={handlePickDate}\n            handleNext={handleNextSlideMonth}\n            handlePrevious={handlePreviousSlideMonth}\n          />\n        </div>     \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}